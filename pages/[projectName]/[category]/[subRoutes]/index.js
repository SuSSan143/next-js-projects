import React from "react";
import { useRouter } from "next/router";
import Head from "next/head";

import projectData from "../../../../data/data";
import Currentpage from "../../../../projects/SpaceTourism/CurrentPage";
import { nameParser, pageTitleParser } from "../../../../utils/parsers";

const SubRoute = (props) => {
  const router = useRouter();
  const { projectName, category, subRoutes } = router.query;
  const parsedProjectName = nameParser(projectName);
  const titleCategory = pageTitleParser(category);

  return (
    <div>
      <Head>
        <title>{`${projectName} | ${titleCategory} | ${subRoutes}`}</title>
        <meta name="description" content="Generated by create next app" />
        <link
          rel="icon"
          href={`/assets/${parsedProjectName}/favicon-32x32.png`}
        />
      </Head>
      <Currentpage data={props} category={category} />
    </div>
  );
};
export default SubRoute;

export async function getStaticPaths(context) {
  const projects = projectData();
  const projectNames = Object.keys(projects);
  const projectDataInfo = projectNames.map((projectName) => {
    return {
      [projectName]: Object.keys(projects[projectName]),
    };
  });

  const rawPath = projectDataInfo.map((data, i) => {
    // @ts-ignore
    const projectName = Object.keys(data)[0]
      .match(/[A-Z][a-z]+/g)
      .join(" ");

    return data[Object.keys(data)[0]].map((category) => {
      const pathArray = data[Object.keys(data)[0]].map((item) => {
        return projects[Object.keys(data)[0]][item]
          .filter(() => item === category)
          .map((categoryItem) => {
            return {
              params: {
                projectName: projectName,
                category: category,
                subRoutes: categoryItem.name,
              },
            };
          });
      });
      return [].concat.apply([], pathArray);
    });
  });

  const path = [].concat.apply([], rawPath);

  return {
    paths: [].concat.apply([], path),
    fallback: false,
  };
}

export async function getStaticProps(context) {
  const { projectName, category, subRoutes } = context.params;
  const parsedCategory = nameParser(category);
  const parsedProjectName = nameParser(projectName);
  const projects = projectData();
  const project = projects[parsedProjectName];
  const currentPageData = project[parsedCategory].filter(
    (data) => data.name.toLowerCase() === subRoutes.toLowerCase()
  );
  return {
    props: currentPageData[0],
  };
}
